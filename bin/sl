#!/usr/bin/env python

from importlib import import_module
from pkgutil import iter_modules
from argparse import ArgumentParser
from sys import exit
from types import ClassType
from ConfigParser import SafeConfigParser, NoOptionError, NoSectionError

import SoftLayer.CLI
from SoftLayer import Client, SoftLayerError
from SoftLayer.CLI import CLIRunnable


def cli_client(cli_args):
    parser = ArgumentParser(add_help=False)

    action_list = []

    action_list = [
        action[1]
        for action in iter_modules(SoftLayer.CLI.__path__)]

    parser.add_argument(
        'module',
        help="Module name, try help or list",
        choices=[
            'help',
            'list',
        ] + action_list)

    parsed_args = parser.parse_known_args(args=cli_args)[0]
    mod = parsed_args.module.lower()

    if mod == 'help':
        parser.print_help()
        exit(1)
    elif mod == 'list':
        for m in action_list:
            h = load_module(m)
            print("{0:>15} {1:<}".format(
                m, h.__doc__))
        exit(0)

    parser = ArgumentParser()
    parser.add_argument(mod)

    module = load_module(mod)

    parser.add_argument(
        '--config', '-C',
        help='Config file')
    parser.add_argument(
        '--really', '-y',
        help='Confirm all prompt actions',
        action='store_true',
        default=False)

    methods = filter(
        lambda m: isinstance(getattr(module, m), ClassType) and
        issubclass(getattr(module, m), CLIRunnable) and
        m != 'CLIRunnable',
        dir(module))

    action_parser = parser.add_subparsers(dest='action')

    for method in methods:
        m = getattr(module, method)
        subparser = action_parser.add_parser(
            m.action,
            help=m.__doc__
        )
        m.add_additional_args(subparser)

    parsed_args = parser.parse_args(args=cli_args)
    action = parsed_args.action

    try:
        call = filter(
            lambda m: getattr(module, m).action == action,
            methods)[0]
    except KeyError:
        raise ValueError("No such method exists: %s" % action)

    client_params = {}
    config_files = []
    config_files.append("~/.softlayer")

    if parsed_args.config:
        config_files.append(parsed_args.config)

    try:
        client_params = parse_config(config_files)
    except ValueError, e:
        if parsed_args.config:
            print(e)

    try:
        client = Client(**client_params)
    except SoftLayerError, e:
        print(e)
        exit(1)
    else:
        getattr(module, call).execute(client, parsed_args)


def parse_config(files):
    import os.path

    config_files = [os.path.expanduser(f) for f in files]

    cp = SafeConfigParser()
    cp.read(config_files)
    config = {}

    try:
        username = cp.get('softlayer', 'username')
        password = cp.get('softlayer', 'api_key')
    except (NoSectionError, NoOptionError):
        pass
    else:
        config.update({"username": username, "api_key": password})

    try:
        config['endpoint_url'] = cp.get('softlayer', 'endpoint_url')
    except (NoOptionError, NoSectionError):
        pass

    return config


def load_module(mod):
    try:
        return import_module('SoftLayer.CLI.%s' % mod)
    except ImportError:
        print("Error: Module '%s' does not exist!" % mod)
        exit(1)


if __name__ == "__main__":
    import sys
    cli_client(sys.argv[1:])
